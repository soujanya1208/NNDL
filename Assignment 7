{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/Assignment%207\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2zZ0NEzL7zIV"
      },
      "source": [
        " import numpy as np\n",
        "import pandas as pd"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "KxX-494H70Jb"
      },
      "source": [
        " \n",
        "data = [[0.2,3.4],[0.4,3.8],[0.6,4.2],[0.8,4.6]]\n",
        " \n",
        "data = np.array(data)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7_wlghgK76xH",
        "outputId": "272fc23b-2522-41ff-87c9-4b5b1d0ab09b",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " data"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[0.2, 3.4], [0.4, 3.8], [0.6, 4.2], [0.8, 4.6]]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "uciTC1BM78dC"
      },
      "source": [
        " data_x = []\n",
        "data_y = []\n",
        "for i in range(0,len(data)):\n",
        "  data_x.append(data[i][0])\n",
        "for i in range(0,len(data)):\n",
        "  data_y.append(data[i][1])\n",
        "data_x=np.array(data_x)\n",
        "data_y=np.array(data_y)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "LulpEN-r8BvA"
      },
      "source": [
        " \n",
        "#STEP 2: initialising required parameters\n",
        "m = 1\n",
        "c = -1\n",
        "iter = 1\n",
        "epochs = 10000\n",
        "alpha = 0.1\n",
        "ns = len(data)\n",
        "error = []"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "04nMGirT9vaz"
      },
      "source": [
        " import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "TPJVweSC9E7a"
      },
      "source": [
        " \n",
        "# while loop is runned until iter reaches epochs\n",
        "while (iter<=epochs):\n",
        "  # running for loop to calculate and update model parameters for each sample\n",
        "  der_m = 0\n",
        "  der_c = 0\n",
        "  err = 0\n",
        "  for i in range(0,len(data)):\n",
        "    # calculating derivatives of m and c\n",
        "    der_m += ((data_y[i] - (m * data_x[i]) - c ))*(data_x[i])\n",
        "    der_c +=  (data_y[i] - (m * data_x[i]) - c )\n",
        " \n",
        "  # computing error rate with present m and c values \n",
        "  # err = (der_c)**2\n",
        "  # err = (err)/(2*ns)\n",
        "  # error.append(err)\n",
        " \n",
        " \n",
        "  der_m = (-1)*(1/ns)*der_m\n",
        "  der_c = (-1)*(1/ns)*der_c\n",
        " \n",
        "  # calculating change in m and c\n",
        "  change_m = (-1)*alpha*der_m\n",
        "  change_c = (-1)*alpha*der_c\n",
        " \n",
        "  #updating m and c\n",
        "  m = m + change_m\n",
        "  c = c + change_c\n",
        " \n",
        " \n",
        "  #incrementing no of iterations\n",
        "  iter = iter + 1"
      ],
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e1gdGtQy9SZX",
        "outputId": "6acf889e-eae2-4d96-9211-e280521b321c",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " print(m,c)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "2.000000000000064 2.999999999999966\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ciiwtrJ29WHQ",
        "outputId": "c3329908-c5e9-4e39-ce29-305b427cc41f",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 229
        }
      },
      "source": [
        " \n",
        "# predictions of training data\n",
        "pred = []\n",
        "print(\"predicted\",\" original\")\n",
        "for i in range(0,len(data)):\n",
        "  pred.append(m*data_x[i]+c)\n",
        "  \n",
        "pred\n",
        " \n",
        "plt.scatter(data_x,data_y,label=\"Original Data points\")\n",
        "plt.plot(data_x,pred,'r',label=\"predicted regression line\")\n",
        "plt.title(\"Linear Regression using Batch Gradient Descent\")\n",
        "plt.xlabel(\"Data x\")\n",
        "plt.ylabel(\"Data y\")\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "predicted  original\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "T5AmQ1iE9_7V",
        "outputId": "8d5458b2-07c8-4624-bd34-22b47f43cf66",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " # computing mean squared error\n",
        "# minimised error in terms of exponential form\n",
        "mse = 0\n",
        "for i in range(0,len(data_x)):\n",
        "  mse += (data_y[i] - (m*data_x[i]) - c)**2\n",
        "mse = mse/len(data)\n",
        "mse"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.103793426611286e-28"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    }
  ]
}