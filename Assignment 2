{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/Assignment%202\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4LZndvS-cbx2",
        "outputId": "d3da9d52-f70d-4071-9300-3b0b8107ac63"
      },
      "source": [
        " \n",
        "# STEP 1: initialising varibles\n",
        "x = -1\n",
        "y = 1\n",
        "epochs = 100\n",
        "alpha = 0.1\n",
        "# function to calculate derivation of x\n",
        "def der_x(x):\n",
        "  val = 2*x\n",
        "  return val\n",
        "# function to calculate derivation of y\n",
        "def der_y(y):\n",
        "  val = 2*y\n",
        "  return val\n",
        "# STEP 2:initialising number of current iteration to 1\n",
        "iter = 1\n",
        "# STEP 3: implementing Descent code\n",
        "while (iter<=epochs):\n",
        "  df_dx = der_x(x)\n",
        "  df_dy = der_y(y)\n",
        " \n",
        "  # STEP 4: calculating change in x and y\n",
        "  change_x = (-1)*alpha*df_dx\n",
        "  change_y = (-1)*alpha*df_dy\n",
        " \n",
        "  # STEP 5: updating model parameters x and y\n",
        "  x = x + change_x\n",
        "  y = y + change_y\n",
        " \n",
        "  # STEP 6: incrementing no of iterations\n",
        "  iter = iter + 1\n",
        "  # STEP 7: printing m and c (GLOBAL MIN POINT)\n",
        "print(x,y)\n",
        "# function to predict f(x)\n",
        "def f(x,y):\n",
        "  val = (x**2)+(y**2)+10\n",
        "  return val\n",
        "# printing global minimum value for given f(X,y) function or curve\n",
        "print(f(x,y))"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-2.0370359763344877e-10 2.0370359763344877e-10\n",
            "10.0\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}