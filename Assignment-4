{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyNTtUnxCkd8YFUhNEf3NlJJ",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/Assignment-4\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "O9D0KszAuLGx"
      },
      "source": [
        " import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import minmax_scale\n",
        "from sklearn.model_selection import train_test_split\n",
        "import seaborn as sns"
      ],
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgZG8gewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwoKICAgICAgbGV0IHBlcmNlbnREb25lID0gZmlsZURhdGEuYnl0ZUxlbmd0aCA9PT0gMCA/CiAgICAgICAgICAxMDAgOgogICAgICAgICAgTWF0aC5yb3VuZCgocG9zaXRpb24gLyBmaWxlRGF0YS5ieXRlTGVuZ3RoKSAqIDEwMCk7CiAgICAgIHBlcmNlbnQudGV4dENvbnRlbnQgPSBgJHtwZXJjZW50RG9uZX0lIGRvbmVgOwoKICAgIH0gd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCk7CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 127
        },
        "id": "9tazTbI1uMBd",
        "outputId": "218de93e-e16e-468d-e438-1e5d8d2873c4"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-01e286cd-e5cd-4a10-803c-28b98852006c\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-01e286cd-e5cd-4a10-803c-28b98852006c\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving csv file.xls to csv file (1).xls\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "WYAxGPsOuvQD",
        "outputId": "00cc5f9e-d3d1-4118-88ac-800e47632d61"
      },
      "source": [
        "data = pd.read_excel(r\"csv file (1).xls\") \n",
        "data"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "*** No CODEPAGE record, no encoding_override: will use 'ascii'\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.6</td>\n",
              "      <td>157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.1</td>\n",
              "      <td>174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.2</td>\n",
              "      <td>175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.5</td>\n",
              "      <td>188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>7.8</td>\n",
              "      <td>143</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>7.3</td>\n",
              "      <td>217</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>8.0</td>\n",
              "      <td>190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>7.1</td>\n",
              "      <td>142</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>7.5</td>\n",
              "      <td>190</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>8.1</td>\n",
              "      <td>215</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>7.0</td>\n",
              "      <td>199</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>7.3</td>\n",
              "      <td>262</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>7.8</td>\n",
              "      <td>105</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>7.3</td>\n",
              "      <td>121</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>8.0</td>\n",
              "      <td>81</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>8.5</td>\n",
              "      <td>82</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>7.1</td>\n",
              "      <td>210</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>8.2</td>\n",
              "      <td>202</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>7.9</td>\n",
              "      <td>155</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>7.6</td>\n",
              "      <td>157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>8.8</td>\n",
              "      <td>147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>7.2</td>\n",
              "      <td>133</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>7.9</td>\n",
              "      <td>53</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>8.1</td>\n",
              "      <td>56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>7.7</td>\n",
              "      <td>113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>8.4</td>\n",
              "      <td>35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>7.4</td>\n",
              "      <td>125</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>7.3</td>\n",
              "      <td>76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>29</th>\n",
              "      <td>8.5</td>\n",
              "      <td>48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>7.8</td>\n",
              "      <td>147</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>6.7</td>\n",
              "      <td>117</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>7.1</td>\n",
              "      <td>182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33</th>\n",
              "      <td>7.3</td>\n",
              "      <td>87</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      X    Y\n",
              "0   7.6  157\n",
              "1   7.1  174\n",
              "2   8.2  175\n",
              "3   7.5  188\n",
              "4   7.4  171\n",
              "5   7.8  143\n",
              "6   7.3  217\n",
              "7   8.0  190\n",
              "8   7.1  142\n",
              "9   7.5  190\n",
              "10  8.1  215\n",
              "11  7.0  199\n",
              "12  7.3  262\n",
              "13  7.8  105\n",
              "14  7.3  121\n",
              "15  8.0   81\n",
              "16  8.5   82\n",
              "17  7.1  210\n",
              "18  8.2  202\n",
              "19  7.9  155\n",
              "20  7.6  157\n",
              "21  8.8  147\n",
              "22  7.2  133\n",
              "23  7.9   53\n",
              "24  8.1   56\n",
              "25  7.7  113\n",
              "26  8.4   35\n",
              "27  7.4  125\n",
              "28  7.3   76\n",
              "29  8.5   48\n",
              "30  7.8  147\n",
              "31  6.7  117\n",
              "32  7.1  182\n",
              "33  7.3   87"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "05A8ejmwvJSr",
        "outputId": "0893f259-d45b-4a24-fc8d-c719179e9ce0"
      },
      "source": [
        " data.info()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 34 entries, 0 to 33\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   X       34 non-null     float64\n",
            " 1   Y       34 non-null     int64  \n",
            "dtypes: float64(1), int64(1)\n",
            "memory usage: 672.0 bytes\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "gvfmArpovcXc",
        "outputId": "bcccde85-631a-4f36-eb9a-0dffb36b13a4"
      },
      "source": [
        "data.describe ()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>34.000000</td>\n",
              "      <td>34.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>7.661765</td>\n",
              "      <td>142.794118</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>0.501522</td>\n",
              "      <td>55.787356</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>6.700000</td>\n",
              "      <td>35.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>7.300000</td>\n",
              "      <td>107.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>7.600000</td>\n",
              "      <td>147.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>8.000000</td>\n",
              "      <td>186.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>8.800000</td>\n",
              "      <td>262.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               X           Y\n",
              "count  34.000000   34.000000\n",
              "mean    7.661765  142.794118\n",
              "std     0.501522   55.787356\n",
              "min     6.700000   35.000000\n",
              "25%     7.300000  107.000000\n",
              "50%     7.600000  147.000000\n",
              "75%     8.000000  186.500000\n",
              "max     8.800000  262.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 111
        },
        "id": "MnHtbuQ3vmSR",
        "outputId": "80443bda-fdef-4a13-cf0b-8cff83265ad8"
      },
      "source": [
        "data.corr()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>X</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.339511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Y</th>\n",
              "      <td>-0.339511</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          X         Y\n",
              "X  1.000000 -0.339511\n",
              "Y -0.339511  1.000000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-kFowp2jvt5v",
        "outputId": "54d4e711-6b35-4d18-cccc-3b4a606e1a09"
      },
      "source": [
        " data.isnull().sum()"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "X    0\n",
              "Y    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 233
        },
        "id": "rlDcWLs1vxus",
        "outputId": "9ef5b277-f322-4759-8b21-bc4f9e6e8c6b"
      },
      "source": [
        " plt.scatter(data['X'],data['Y'])"
      ],
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7efd0f135e50>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wzlyToenv3RD",
        "outputId": "0616b1a8-6c47-4bfc-bc4e-352fe86deb42"
      },
      "source": [
        " from scipy import stats\n",
        " \n",
        "z = np.abs(stats.zscore(data))\n",
        "print(z)"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "[[0.12500664 0.25847285]\n",
            " [1.13696519 0.56778404]\n",
            " [1.08934361 0.58597881]\n",
            " [0.32739835 0.8225109 ]\n",
            " [0.52979006 0.51319971]\n",
            " [0.27977677 0.00374598]\n",
            " [0.73218177 1.3501594 ]\n",
            " [0.68456019 0.85890045]\n",
            " [1.13696519 0.01444879]\n",
            " [0.32739835 0.85890045]\n",
            " [0.8869519  1.31376985]\n",
            " [1.3393569  1.02265344]\n",
            " [0.73218177 2.16892432]\n",
            " [0.27977677 0.6876555 ]\n",
            " [0.73218177 0.39653909]\n",
            " [0.68456019 1.12433013]\n",
            " [1.69651874 1.10613535]\n",
            " [1.13696519 1.22279597]\n",
            " [1.08934361 1.07723776]\n",
            " [0.48216848 0.22208329]\n",
            " [0.12500664 0.25847285]\n",
            " [2.30369386 0.07652509]\n",
            " [0.93457348 0.17820178]\n",
            " [0.48216848 1.63378385]\n",
            " [0.8869519  1.57919952]\n",
            " [0.07738507 0.5420973 ]\n",
            " [1.49412703 1.96128982]\n",
            " [0.52979006 0.32375998]\n",
            " [0.73218177 1.21530401]\n",
            " [1.69651874 1.72475773]\n",
            " [0.27977677 0.07652509]\n",
            " [1.94653203 0.46931819]\n",
            " [1.13696519 0.71334225]\n",
            " [0.73218177 1.01516147]]\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 255
        },
        "id": "N0u-KyaKv9gH",
        "outputId": "9ca17997-4364-40c6-c614-249c2b1e23cb"
      },
      "source": [
        " sns.boxplot(x=data['X'])"
      ],
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7efd0f058250>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 217
        },
        "id": "56gHqL08wB4W",
        "outputId": "d03e7337-1aba-468e-d0fb-d1b3a703fc61"
      },
      "source": [
        " sns.boxplot(y=data['Y'])"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7efd0eb60410>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "GKC3ri-3wFEx",
        "outputId": "29db2474-4893-4372-b639-a2d5f3375ca7"
      },
      "source": [
        " filter = data[(z < 3).all(axis=1)]\n",
        "filter.head()"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>7.6</td>\n",
              "      <td>157</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>7.1</td>\n",
              "      <td>174</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>8.2</td>\n",
              "      <td>175</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>7.5</td>\n",
              "      <td>188</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>7.4</td>\n",
              "      <td>171</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "     X    Y\n",
              "0  7.6  157\n",
              "1  7.1  174\n",
              "2  8.2  175\n",
              "3  7.5  188\n",
              "4  7.4  171"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Zx1xAR4LwJ2r",
        "outputId": "1a9d4172-46db-4f31-f415-8ba6152ae579"
      },
      "source": [
        " print(len(data))\n",
        "print(len(filter))"
      ],
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "34\n",
            "34\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "AX_4WFhcwPyl"
      },
      "source": [
        " norm_data = data.copy()"
      ],
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "8hog7Ce2wVE_",
        "outputId": "a75bd4f4-ea53-4047-b336-656942b81625"
      },
      "source": [
        " norm_data = (norm_data - norm_data.min())/(norm_data.max() - norm_data.min())\n",
        "norm_data.head()"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.428571</td>\n",
              "      <td>0.537445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.190476</td>\n",
              "      <td>0.612335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.616740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.380952</td>\n",
              "      <td>0.674009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.599119</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          X         Y\n",
              "0  0.428571  0.537445\n",
              "1  0.190476  0.612335\n",
              "2  0.714286  0.616740\n",
              "3  0.380952  0.674009\n",
              "4  0.333333  0.599119"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 25
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "iyIIAV8VwZQH"
      },
      "source": [
        " data_train,data_test = train_test_split(norm_data,test_size=0.1)"
      ],
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 979
        },
        "id": "uj0gy8QAwjeL",
        "outputId": "6e712990-1926-427a-8707-a45184e80f1a"
      },
      "source": [
        " data_train"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>X</th>\n",
              "      <th>Y</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>0.142857</td>\n",
              "      <td>0.722467</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.190476</td>\n",
              "      <td>0.612335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28</th>\n",
              "      <td>0.285714</td>\n",
              "      <td>0.180617</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.857143</td>\n",
              "      <td>0.207048</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>23</th>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.079295</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>22</th>\n",
              "      <td>0.238095</td>\n",
              "      <td>0.431718</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>0.428571</td>\n",
              "      <td>0.537445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24</th>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.092511</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25</th>\n",
              "      <td>0.476190</td>\n",
              "      <td>0.343612</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.619048</td>\n",
              "      <td>0.202643</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.285714</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.285714</td>\n",
              "      <td>0.801762</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.523810</td>\n",
              "      <td>0.475771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.190476</td>\n",
              "      <td>0.770925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.380952</td>\n",
              "      <td>0.674009</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.666667</td>\n",
              "      <td>0.792952</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32</th>\n",
              "      <td>0.190476</td>\n",
              "      <td>0.647577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.616740</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31</th>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.361233</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.428571</td>\n",
              "      <td>0.537445</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>0.571429</td>\n",
              "      <td>0.528634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.380952</td>\n",
              "      <td>0.682819</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.190476</td>\n",
              "      <td>0.471366</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26</th>\n",
              "      <td>0.809524</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>0.714286</td>\n",
              "      <td>0.735683</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.285714</td>\n",
              "      <td>0.378855</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.599119</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>21</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.493392</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27</th>\n",
              "      <td>0.333333</td>\n",
              "      <td>0.396476</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30</th>\n",
              "      <td>0.523810</td>\n",
              "      <td>0.493392</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           X         Y\n",
              "11  0.142857  0.722467\n",
              "1   0.190476  0.612335\n",
              "28  0.285714  0.180617\n",
              "16  0.857143  0.207048\n",
              "23  0.571429  0.079295\n",
              "22  0.238095  0.431718\n",
              "20  0.428571  0.537445\n",
              "24  0.666667  0.092511\n",
              "25  0.476190  0.343612\n",
              "15  0.619048  0.202643\n",
              "12  0.285714  1.000000\n",
              "6   0.285714  0.801762\n",
              "5   0.523810  0.475771\n",
              "17  0.190476  0.770925\n",
              "3   0.380952  0.674009\n",
              "10  0.666667  0.792952\n",
              "32  0.190476  0.647577\n",
              "2   0.714286  0.616740\n",
              "31  0.000000  0.361233\n",
              "0   0.428571  0.537445\n",
              "19  0.571429  0.528634\n",
              "9   0.380952  0.682819\n",
              "8   0.190476  0.471366\n",
              "26  0.809524  0.000000\n",
              "18  0.714286  0.735683\n",
              "14  0.285714  0.378855\n",
              "4   0.333333  0.599119\n",
              "21  1.000000  0.493392\n",
              "27  0.333333  0.396476\n",
              "30  0.523810  0.493392"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Gfux7_P5woZ5",
        "outputId": "7508f69b-4854-40d0-dad7-673db53716f5"
      },
      "source": [
        " print(len(data_test))"
      ],
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WEi23kgUwtFh",
        "outputId": "3e48d92a-398b-43e8-c12a-74f48c295e6a"
      },
      "source": [
        " data_x = np.array(data_train['X'])\n",
        "data_y = np.array(data_train['Y'])\n",
        "data_x"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.14285714, 0.19047619, 0.28571429, 0.85714286, 0.57142857,\n",
              "       0.23809524, 0.42857143, 0.66666667, 0.47619048, 0.61904762,\n",
              "       0.28571429, 0.28571429, 0.52380952, 0.19047619, 0.38095238,\n",
              "       0.66666667, 0.19047619, 0.71428571, 0.        , 0.42857143,\n",
              "       0.57142857, 0.38095238, 0.19047619, 0.80952381, 0.71428571,\n",
              "       0.28571429, 0.33333333, 1.        , 0.33333333, 0.52380952])"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "68BNARUUwyYi"
      },
      "source": [
        " #STEP 2: initialising required parameters\n",
        "m = 1\n",
        "c = -1\n",
        "iter = 1\n",
        "epochs = 100\n",
        "alpha = 0.1\n",
        "ns = len(data_train['X'])\n",
        "error = []"
      ],
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FYkmfpCpw4lr",
        "outputId": "9113f924-8b4a-48f4-aafa-9d35178d9e9e"
      },
      "source": [
        " # Calculating Gradient Descent\n",
        "while (iter<=epochs):\n",
        "  err = 0\n",
        "  # running for loop to calculate and update model parameters for each sampleerr = 0\n",
        "  for i in range(0,ns):\n",
        " \n",
        "    # calculating error and storing in an list\n",
        "    err +=  ((data_y[i] - (m * data_x[i]) - c))**2\n",
        "    # calculating derivatives of m and c\n",
        "    der_m = (-1) * ((data_y[i] - (m * data_x[i]) - c ))*(data_x[i])\n",
        "    der_c = (-1) * (data_y[i] - (m * data_x[i]) - c )\n",
        " \n",
        "    # calculating change in m and c\n",
        "    change_m = (-1)*alpha*der_m\n",
        "    change_c = (-1)*alpha*der_c\n",
        " \n",
        "    #updating m and c\n",
        "    m = m + change_m\n",
        "    c = c + change_c\n",
        " \n",
        "  #incrementing no of iterations\n",
        "  iter = iter + 1\n",
        "  err = (1/(2*len(data_train['X'])))*(err)\n",
        "  error.append(err)\n",
        "  \n",
        "print(m,c)"
      ],
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "-0.29003286327086364 0.6437688455955567\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uD73TFt4xCzv",
        "outputId": "17a3a925-0fe3-475e-fd58-f39345434a77"
      },
      "source": [
        " data_train_pred =  m*data_train['X'] + c\n",
        " \n",
        "from sklearn.metrics import mean_squared_error\n",
        "mse = mean_squared_error(data_train['Y'],data_train_pred)\n",
        "mse"
      ],
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.050284041115552444"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 34
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2_g2DBqRxJjt",
        "outputId": "089dcd4b-87c6-43e5-b1c2-28756f0d227e"
      },
      "source": [
        " len(error)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "100"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZZIzTlytxN9G"
      },
      "source": [
        " data_train_x = np.array(data_train['X'])\n",
        "data_train_y = np.array(data_train['Y'])\n",
        "pred2 = []\n",
        "for i in data_train_x:\n",
        "    pred2.append(m*i + c)"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 234
        },
        "id": "RT1peNtuxSxf",
        "outputId": "d96783cd-3887-4f78-9864-7af2311cbba5"
      },
      "source": [
        " plt.plot(data_train_x,pred2)\n",
        "plt.scatter(data_train_x,data_train_y)"
      ],
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7efd0e023550>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 36
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "LuhdqkehxWo-",
        "outputId": "43aaf2c6-a31c-4fea-f182-713b19ab9d66"
      },
      "source": [
        " iters = np.arange(epochs)\n",
        "plt.plot(iters,error)\n",
        "plt.title(\"Error Analysis of Trained Model\")\n",
        "plt.xlabel(\" ith iteration\")\n",
        "plt.ylabel(\"error at ith iteration\")\n",
        "plt.grid()"
      ],
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aQvnoFg5xbKf",
        "outputId": "1d63e068-bc5c-45a3-c40b-a6e8a0c26a1f"
      },
      "source": [
        " data_test_pred = m*data_test['X'] + c\n",
        "mse2 = mean_squared_error(data_test['Y'],data_test_pred)\n",
        "mse2"
      ],
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.07643339722271693"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 38
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 197
        },
        "id": "A95JDsxcxf7N",
        "outputId": "4ab861b6-44d1-430d-f2e6-8ee3b9496de7"
      },
      "source": [
        " plt.scatter(data_test['X'],data_test['Y'])\n",
        "plt.plot(data_test['X'],data_test_pred,'red')\n",
        "plt.grid()"
      ],
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "IGn3JN9bxlDU"
      },
      "source": [
        " min_x = data['X'].min()\n",
        "max_x = data['X'].max()\n",
        "min_y = data['Y'].min()\n",
        "max_y = data['Y'].max()"
      ],
      "execution_count": 40,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zjEFbS9OxzWr",
        "outputId": "63dd0969-1a02-47a2-df79-13dfe550b6f4"
      },
      "source": [
        " input_x = float(input(\"enter the pH of well water:\"))\n",
        "input_xx = input_x\n",
        "input_x = (input_x - min_x)/(max_x - min_x)\n",
        "output_y = m*input_x + c\n",
        "output_y = output_y*(max_y - min_y) + min_y\n",
        "print(\"Total number of bicarbonates in well water having pH =\",input_xx,\"is\",output_y)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter the pH of well water:4.6\n",
            "Total number of bicarbonates in well water having pH = 4.6 is 246.9729879126774\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}