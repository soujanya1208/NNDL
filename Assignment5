{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/Assignment5\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "czN66aRV0LNX"
      },
      "source": [
        " #IMPORTING NECESSARY PACKAGES\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "17ZXgOWE0REV",
        "outputId": "8f9f26a9-70b9-4481-deeb-f372de437506",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " data = [[0.2,3.4],[0.4,3.8],[0.6,4.2],[0.8,4.6]] \n",
        "data"
      ],
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[[0.2, 3.4], [0.4, 3.8], [0.6, 4.2], [0.8, 4.6]]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "H5kqMfnt0cB0"
      },
      "source": [
        " data_x = []\n",
        "data_y = []\n",
        "for i in range(len(data)):\n",
        "  data_x.append(data[i][0])\n",
        "  data_y.append(data[i][1])\n",
        " \n",
        "data_x = np.array(data_x)\n",
        "data_y = np.array(data_y)"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yygYeWgo0d7S",
        "outputId": "02d43801-5a69-45c5-e9b2-51a01ae05c50",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " \n",
        "bs = 2\n",
        "nb = np.ceil(len(data)/bs)\n",
        "nb\n",
        "# SHUFFLING DATA POINTS\n",
        "import random\n",
        "samples = np.arange(len(data))\n",
        "random.shuffle(samples)\n",
        "samples\n",
        "for i in samples:\n",
        "  print(data_x[i],data_y[i])\n",
        "# INITIALISING ALL REQUIRED PARAMETERS\n",
        "iter = 1\n",
        "epochs = 10000\n",
        "batch = nb - 1\n",
        "bat = 1\n",
        "alpha = 0.1 # LEARNING RATE\n",
        "m = 1\n",
        "c = -1\n",
        "while (iter<=epochs):\n",
        "  i = 0\n",
        "  # RUNNING ITERATION FOR N-1 BATCHES\n",
        "  while (bat <= batch):\n",
        "    der_m = 0\n",
        "    der_c = 0\n",
        "    err = 0\n",
        "    for k in range(0,bs):\n",
        "      der_m = der_m + (data_y[samples[i]] - (m*data_x[samples[i]])-c)*(data_x[samples[i]])\n",
        "      der_c = der_c + (data_y[samples[i]] - (m*data_x[samples[i]])-c)\n",
        "      i = i+1\n",
        "      \n",
        "    # err = der_c**2\n",
        "    # err = (1/(2*bs))*err\n",
        "    # error.append(err)\n",
        "    \n",
        "    der_m = (1/bs)*der_m\n",
        "    der_c = (1/bs)*der_c\n",
        "    change_m = (-1)*alpha*der_m\n",
        "    change_c = (-1)*alpha*der_c\n",
        "    \n",
        "    m = m + change_m\n",
        "    c = c + change_c\n",
        "    bat = bat + 1\n",
        "    \n",
        " \n",
        "  # EXECUTING FOR LAST BATCH\n",
        "  der_m = 0\n",
        "  der_c = 0\n",
        "  err = 0\n",
        "  # FINDING REMAINING NUMBER OF BATCHES\n",
        "  es = len(samples) - i  \n",
        "  \n",
        "  for k in range(i,len(samples)):\n",
        "    der_m = der_m + (data_y[samples[i]] - (m*data_x[samples[i]])-c)*(data_x[samples[i]])\n",
        "    der_c = der_c + (data_y[samples[i]] - (m*data_x[samples[i]])-c)\n",
        "    i = i + 1\n",
        "  der_m = (-1/es)*der_m\n",
        "  der_c = (-1/es)*der_c\n",
        "  \n",
        "  change_m = (-1)*alpha*der_m\n",
        "  change_c = (-1)*alpha*der_c\n",
        "  \n",
        "  m = m + change_m\n",
        "  c = c + change_c\n",
        "  \n",
        "  iter = iter + 1\n",
        " \n",
        "print(m,c)"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "0.8 4.6\n",
            "0.6 4.2\n",
            "0.2 3.4\n",
            "0.4 3.8\n",
            "2.000000000000064 2.999999999999966\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "sU-Bscmt2SRo",
        "outputId": "ab58c56d-0b75-4b7d-a6eb-e368861cc592",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "source": [
        " #PREDICTING THE OUTPUT FOR TRAINING DATA\n",
        "pred = []\n",
        "for i in range(0,len(data)):\n",
        "  pred.append(m*data_x[i] + c)\n",
        "pred\n",
        "m*0.4 + c\n",
        "# MEAN SQUARE ERROR IN EXPONENTIAL FORM\n",
        "# MINIMISED ERROR\n",
        "mse = 0\n",
        "for i in range(0,len(data)):\n",
        "  mse += (data_y[i] - (m*data_x[i]) -c)**2\n",
        "mse = (1/len(data))*mse\n",
        "mse"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2.103793426611286e-28"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hhfL-Cux2Y7c",
        "outputId": "6a91330d-395f-45be-acde-a702e369c2fe",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        }
      },
      "source": [
        " # PLOTTING OF DATA\n",
        "plt.scatter(data_x,data_y,label='Original Data Points')\n",
        "plt.plot(data_x,pred,'red',label='Predicted Regression Line')\n",
        "plt.legend()\n",
        "plt.title(\"Linear Regression using Mini Batch Gradient Descent\")\n",
        "plt.xlabel(\"DATA X\")\n",
        "plt.ylabel(\"DATA Y\")\n",
        "plt.grid()"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}