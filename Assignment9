{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Welcome To Colaboratory",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/Assignment9\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "_WhFscMd_K9r",
        "outputId": "43401011-24e8-4de6-b2f5-ae8e97a02e18",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 246
        }
      },
      "source": [
        " \n",
        "# importing all necessary packages\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "# a 4 row sample data set on which algorithm is trained\n",
        "data = [[0.2,3.4],[0.4,3.8],[0.6,4.2],[0.8,4.6]]\n",
        "data = np.array(data)\n",
        "# view of data\n",
        "data\n",
        "# STEP 1: Reading data X and Y\n",
        "data_x = []\n",
        "data_y = []\n",
        "for i in range(0,len(data)):\n",
        "  data_x.append(data[i][0])\n",
        "for i in range(0,len(data)):\n",
        "  data_y.append(data[i][1])\n",
        "data_x=np.array(data_x)\n",
        "data_y=np.array(data_y)\n",
        "#STEP 2: initialising required parameters\n",
        "m = 1\n",
        "c = -1\n",
        "iter = 1\n",
        "epochs = 10000\n",
        "alpha = 0.1\n",
        "ns = len(data)\n",
        " \n",
        "vm = 0\n",
        "vc = 0\n",
        "moment = 0.9\n",
        "import matplotlib.pyplot as plt\n",
        "# while loop is runned until iter reaches epochs\n",
        "while (iter<=epochs):\n",
        "  # running for loop to calculate and update model parameters for each sample\n",
        "  for i in range(0,len(data)):\n",
        " \n",
        "    #  calculating error and storing in an list\n",
        "    # err = (0.5) * ((data_y[i] - (m * data_x[i]) - c))**2\n",
        "    # error.append(err)\n",
        " \n",
        "    # calculating derivatives of m and c\n",
        "    der_m = (-1) * ((data_y[i] - (m * data_x[i]) - c ))*(data_x[i])\n",
        "    der_c = (-1) * (data_y[i] - (m * data_x[i]) - c )\n",
        "    # print(\"derivatives at \",i,\"   \",der_m,der_c)\n",
        " \n",
        "    # calculating change in m and c\n",
        "    vm = (moment * vm) - (alpha * der_m)\n",
        "    vc = (moment * vc) - (alpha * der_c)\n",
        "    # print(\"changes at \",i,vm,vc)\n",
        " \n",
        "    #updating m and c\n",
        "    m = m + vm\n",
        "    c = c + vc\n",
        "    # print(\"values at\",i,m,c)\n",
        " \n",
        "    #incrementing no of iterations\n",
        "  iter = iter + 1\n",
        " \n",
        " \n",
        "  \n",
        "print(m,c)\n",
        "# computing mean squared error\n",
        "# minimised mean squared error of training data \n",
        "# represented in exponential form\n",
        "mse = 0\n",
        "for i in range(0,len(data_x)):\n",
        "  mse += (data_y[i] - (m*data_x[i]) - c)**2\n",
        " \n",
        "mse = mse/len(data)\n",
        "mse\n",
        "pred = []\n",
        "# predictions of training data\n",
        "print(\"predicted\",\" original\")\n",
        "for i in range(0,len(data)):\n",
        "  pred.append(m*data_x[i] + c)\n",
        " \n",
        "pred\n",
        "# plotting graph\n",
        "plt.scatter(data_x,data_y,label=\"original data points\")\n",
        "plt.plot(data_x,pred,'orange',label=\"regression line using MGD\")\n",
        "plt.legend()\n",
        "plt.grid()\n",
        "plt.title(\"linear regression using momentum gradient descent\")\n",
        "plt.xlabel(\"data x\")\n",
        "plt.ylabel(\"data y\")\n",
        "plt.show()"
      ],
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "1.9999999999999998 3.0\n",
            "predicted  original\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    }
  ]
}