{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Untitled0.ipynb",
      "provenance": [],
      "authorship_tag": "ABX9TyM+fJt7vxxs7rPW0dwuAH8w",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/soujanya1208/NNDL/blob/main/assignment-14\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4T-aKgEbY4lD"
      },
      "source": [
        " import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import pandas as pd\n",
        "from sklearn.preprocessing import minmax_scale\n",
        "from sklearn.model_selection import train_test_split\n",
        "import seaborn as sns\n",
        "import math"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "resources": {
            "http://localhost:8080/nbextensions/google.colab/files.js": {
              "data": "Ly8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQwovLwovLyBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKLy8geW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgovLyBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKLy8KLy8gICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjAKLy8KLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZQovLyBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiAiQVMgSVMiIEJBU0lTLAovLyBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4KLy8gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZAovLyBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS4KCi8qKgogKiBAZmlsZW92ZXJ2aWV3IEhlbHBlcnMgZm9yIGdvb2dsZS5jb2xhYiBQeXRob24gbW9kdWxlLgogKi8KKGZ1bmN0aW9uKHNjb3BlKSB7CmZ1bmN0aW9uIHNwYW4odGV4dCwgc3R5bGVBdHRyaWJ1dGVzID0ge30pIHsKICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3BhbicpOwogIGVsZW1lbnQudGV4dENvbnRlbnQgPSB0ZXh0OwogIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKHN0eWxlQXR0cmlidXRlcykpIHsKICAgIGVsZW1lbnQuc3R5bGVba2V5XSA9IHN0eWxlQXR0cmlidXRlc1trZXldOwogIH0KICByZXR1cm4gZWxlbWVudDsKfQoKLy8gTWF4IG51bWJlciBvZiBieXRlcyB3aGljaCB3aWxsIGJlIHVwbG9hZGVkIGF0IGEgdGltZS4KY29uc3QgTUFYX1BBWUxPQURfU0laRSA9IDEwMCAqIDEwMjQ7CgpmdW5jdGlvbiBfdXBsb2FkRmlsZXMoaW5wdXRJZCwgb3V0cHV0SWQpIHsKICBjb25zdCBzdGVwcyA9IHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCk7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICAvLyBDYWNoZSBzdGVwcyBvbiB0aGUgb3V0cHV0RWxlbWVudCB0byBtYWtlIGl0IGF2YWlsYWJsZSBmb3IgdGhlIG5leHQgY2FsbAogIC8vIHRvIHVwbG9hZEZpbGVzQ29udGludWUgZnJvbSBQeXRob24uCiAgb3V0cHV0RWxlbWVudC5zdGVwcyA9IHN0ZXBzOwoKICByZXR1cm4gX3VwbG9hZEZpbGVzQ29udGludWUob3V0cHV0SWQpOwp9CgovLyBUaGlzIGlzIHJvdWdobHkgYW4gYXN5bmMgZ2VuZXJhdG9yIChub3Qgc3VwcG9ydGVkIGluIHRoZSBicm93c2VyIHlldCksCi8vIHdoZXJlIHRoZXJlIGFyZSBtdWx0aXBsZSBhc3luY2hyb25vdXMgc3RlcHMgYW5kIHRoZSBQeXRob24gc2lkZSBpcyBnb2luZwovLyB0byBwb2xsIGZvciBjb21wbGV0aW9uIG9mIGVhY2ggc3RlcC4KLy8gVGhpcyB1c2VzIGEgUHJvbWlzZSB0byBibG9jayB0aGUgcHl0aG9uIHNpZGUgb24gY29tcGxldGlvbiBvZiBlYWNoIHN0ZXAsCi8vIHRoZW4gcGFzc2VzIHRoZSByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHN0ZXAgYXMgdGhlIGlucHV0IHRvIHRoZSBuZXh0IHN0ZXAuCmZ1bmN0aW9uIF91cGxvYWRGaWxlc0NvbnRpbnVlKG91dHB1dElkKSB7CiAgY29uc3Qgb3V0cHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG91dHB1dElkKTsKICBjb25zdCBzdGVwcyA9IG91dHB1dEVsZW1lbnQuc3RlcHM7CgogIGNvbnN0IG5leHQgPSBzdGVwcy5uZXh0KG91dHB1dEVsZW1lbnQubGFzdFByb21pc2VWYWx1ZSk7CiAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXh0LnZhbHVlLnByb21pc2UpLnRoZW4oKHZhbHVlKSA9PiB7CiAgICAvLyBDYWNoZSB0aGUgbGFzdCBwcm9taXNlIHZhbHVlIHRvIG1ha2UgaXQgYXZhaWxhYmxlIHRvIHRoZSBuZXh0CiAgICAvLyBzdGVwIG9mIHRoZSBnZW5lcmF0b3IuCiAgICBvdXRwdXRFbGVtZW50Lmxhc3RQcm9taXNlVmFsdWUgPSB2YWx1ZTsKICAgIHJldHVybiBuZXh0LnZhbHVlLnJlc3BvbnNlOwogIH0pOwp9CgovKioKICogR2VuZXJhdG9yIGZ1bmN0aW9uIHdoaWNoIGlzIGNhbGxlZCBiZXR3ZWVuIGVhY2ggYXN5bmMgc3RlcCBvZiB0aGUgdXBsb2FkCiAqIHByb2Nlc3MuCiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dElkIEVsZW1lbnQgSUQgb2YgdGhlIGlucHV0IGZpbGUgcGlja2VyIGVsZW1lbnQuCiAqIEBwYXJhbSB7c3RyaW5nfSBvdXRwdXRJZCBFbGVtZW50IElEIG9mIHRoZSBvdXRwdXQgZGlzcGxheS4KICogQHJldHVybiB7IUl0ZXJhYmxlPCFPYmplY3Q+fSBJdGVyYWJsZSBvZiBuZXh0IHN0ZXBzLgogKi8KZnVuY3Rpb24qIHVwbG9hZEZpbGVzU3RlcChpbnB1dElkLCBvdXRwdXRJZCkgewogIGNvbnN0IGlucHV0RWxlbWVudCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlucHV0SWQpOwogIGlucHV0RWxlbWVudC5kaXNhYmxlZCA9IGZhbHNlOwoKICBjb25zdCBvdXRwdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3V0cHV0SWQpOwogIG91dHB1dEVsZW1lbnQuaW5uZXJIVE1MID0gJyc7CgogIGNvbnN0IHBpY2tlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIChlKSA9PiB7CiAgICAgIHJlc29sdmUoZS50YXJnZXQuZmlsZXMpOwogICAgfSk7CiAgfSk7CgogIGNvbnN0IGNhbmNlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpOwogIGlucHV0RWxlbWVudC5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGNhbmNlbCk7CiAgY2FuY2VsLnRleHRDb250ZW50ID0gJ0NhbmNlbCB1cGxvYWQnOwogIGNvbnN0IGNhbmNlbFByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gewogICAgY2FuY2VsLm9uY2xpY2sgPSAoKSA9PiB7CiAgICAgIHJlc29sdmUobnVsbCk7CiAgICB9OwogIH0pOwoKICAvLyBXYWl0IGZvciB0aGUgdXNlciB0byBwaWNrIHRoZSBmaWxlcy4KICBjb25zdCBmaWxlcyA9IHlpZWxkIHsKICAgIHByb21pc2U6IFByb21pc2UucmFjZShbcGlja2VkUHJvbWlzZSwgY2FuY2VsUHJvbWlzZV0pLAogICAgcmVzcG9uc2U6IHsKICAgICAgYWN0aW9uOiAnc3RhcnRpbmcnLAogICAgfQogIH07CgogIGNhbmNlbC5yZW1vdmUoKTsKCiAgLy8gRGlzYWJsZSB0aGUgaW5wdXQgZWxlbWVudCBzaW5jZSBmdXJ0aGVyIHBpY2tzIGFyZSBub3QgYWxsb3dlZC4KICBpbnB1dEVsZW1lbnQuZGlzYWJsZWQgPSB0cnVlOwoKICBpZiAoIWZpbGVzKSB7CiAgICByZXR1cm4gewogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbXBsZXRlJywKICAgICAgfQogICAgfTsKICB9CgogIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykgewogICAgY29uc3QgbGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOwogICAgbGkuYXBwZW5kKHNwYW4oZmlsZS5uYW1lLCB7Zm9udFdlaWdodDogJ2JvbGQnfSkpOwogICAgbGkuYXBwZW5kKHNwYW4oCiAgICAgICAgYCgke2ZpbGUudHlwZSB8fCAnbi9hJ30pIC0gJHtmaWxlLnNpemV9IGJ5dGVzLCBgICsKICAgICAgICBgbGFzdCBtb2RpZmllZDogJHsKICAgICAgICAgICAgZmlsZS5sYXN0TW9kaWZpZWREYXRlID8gZmlsZS5sYXN0TW9kaWZpZWREYXRlLnRvTG9jYWxlRGF0ZVN0cmluZygpIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ24vYSd9IC0gYCkpOwogICAgY29uc3QgcGVyY2VudCA9IHNwYW4oJzAlIGRvbmUnKTsKICAgIGxpLmFwcGVuZENoaWxkKHBlcmNlbnQpOwoKICAgIG91dHB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQobGkpOwoKICAgIGNvbnN0IGZpbGVEYXRhUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7CiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7CiAgICAgIHJlYWRlci5vbmxvYWQgPSAoZSkgPT4gewogICAgICAgIHJlc29sdmUoZS50YXJnZXQucmVzdWx0KTsKICAgICAgfTsKICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGZpbGUpOwogICAgfSk7CiAgICAvLyBXYWl0IGZvciB0aGUgZGF0YSB0byBiZSByZWFkeS4KICAgIGxldCBmaWxlRGF0YSA9IHlpZWxkIHsKICAgICAgcHJvbWlzZTogZmlsZURhdGFQcm9taXNlLAogICAgICByZXNwb25zZTogewogICAgICAgIGFjdGlvbjogJ2NvbnRpbnVlJywKICAgICAgfQogICAgfTsKCiAgICAvLyBVc2UgYSBjaHVua2VkIHNlbmRpbmcgdG8gYXZvaWQgbWVzc2FnZSBzaXplIGxpbWl0cy4gU2VlIGIvNjIxMTU2NjAuCiAgICBsZXQgcG9zaXRpb24gPSAwOwogICAgd2hpbGUgKHBvc2l0aW9uIDwgZmlsZURhdGEuYnl0ZUxlbmd0aCkgewogICAgICBjb25zdCBsZW5ndGggPSBNYXRoLm1pbihmaWxlRGF0YS5ieXRlTGVuZ3RoIC0gcG9zaXRpb24sIE1BWF9QQVlMT0FEX1NJWkUpOwogICAgICBjb25zdCBjaHVuayA9IG5ldyBVaW50OEFycmF5KGZpbGVEYXRhLCBwb3NpdGlvbiwgbGVuZ3RoKTsKICAgICAgcG9zaXRpb24gKz0gbGVuZ3RoOwoKICAgICAgY29uc3QgYmFzZTY0ID0gYnRvYShTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGNodW5rKSk7CiAgICAgIHlpZWxkIHsKICAgICAgICByZXNwb25zZTogewogICAgICAgICAgYWN0aW9uOiAnYXBwZW5kJywKICAgICAgICAgIGZpbGU6IGZpbGUubmFtZSwKICAgICAgICAgIGRhdGE6IGJhc2U2NCwKICAgICAgICB9LAogICAgICB9OwogICAgICBwZXJjZW50LnRleHRDb250ZW50ID0KICAgICAgICAgIGAke01hdGgucm91bmQoKHBvc2l0aW9uIC8gZmlsZURhdGEuYnl0ZUxlbmd0aCkgKiAxMDApfSUgZG9uZWA7CiAgICB9CiAgfQoKICAvLyBBbGwgZG9uZS4KICB5aWVsZCB7CiAgICByZXNwb25zZTogewogICAgICBhY3Rpb246ICdjb21wbGV0ZScsCiAgICB9CiAgfTsKfQoKc2NvcGUuZ29vZ2xlID0gc2NvcGUuZ29vZ2xlIHx8IHt9OwpzY29wZS5nb29nbGUuY29sYWIgPSBzY29wZS5nb29nbGUuY29sYWIgfHwge307CnNjb3BlLmdvb2dsZS5jb2xhYi5fZmlsZXMgPSB7CiAgX3VwbG9hZEZpbGVzLAogIF91cGxvYWRGaWxlc0NvbnRpbnVlLAp9Owp9KShzZWxmKTsK",
              "ok": true,
              "headers": [
                [
                  "content-type",
                  "application/javascript"
                ]
              ],
              "status": 200,
              "status_text": ""
            }
          },
          "base_uri": "https://localhost:8080/",
          "height": 161
        },
        "id": "SRstyBkKdYAT",
        "outputId": "0b5f3c9e-b052-47c1-9b37-2bbb87407a30"
      },
      "source": [
        "from google.colab import files\n",
        "uploaded=files.upload()"
      ],
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-088093f5-bc7b-41a9-a479-3037f4171603\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-088093f5-bc7b-41a9-a479-3037f4171603\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script src=\"/nbextensions/google.colab/files.js\"></script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {
            "tags": []
          }
        },
        {
          "output_type": "stream",
          "text": [
            "Saving Load Data in kW (1)-3.xlsx to Load Data in kW (1)-3.xlsx\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 221
        },
        "id": "9aW9Mdq7dnA_",
        "outputId": "65813a3f-f15a-46e2-e5b9-c5d0b5627e8a"
      },
      "source": [
        "load_data = pd.read_excel(\"Load Data in kW (1)-3.xlsx\")\n",
        "print(load_data.shape)\n",
        "load_data.head()"
      ],
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(2183, 1)\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>5551.82208</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4983.17184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4888.39680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5072.95872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5196.25980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5641.29720</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "   5551.82208\n",
              "0  4983.17184\n",
              "1  4888.39680\n",
              "2  5072.95872\n",
              "3  5196.25980\n",
              "4  5641.29720"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "f5uXmfH5eJju",
        "outputId": "00b2d552-5685-40da-d41b-cc21855e7c6a"
      },
      "source": [
        " type(load_data)"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "pandas.core.frame.DataFrame"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "NXgpDIPdePjF"
      },
      "source": [
        " data = load_data.rename(columns={5551.82208:'load'},inplace=False)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "LddBKE5EeU-J",
        "outputId": "ffe73adf-89b7-4d23-cff1-23d228bb0db3"
      },
      "source": [
        " data.head()"
      ],
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>load</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4983.17184</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>4888.39680</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5072.95872</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5196.25980</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5641.29720</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         load\n",
              "0  4983.17184\n",
              "1  4888.39680\n",
              "2  5072.95872\n",
              "3  5196.25980\n",
              "4  5641.29720"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MWWtxZx3ebES",
        "outputId": "e54a9944-8d52-4e2a-dafb-3b141bc7b508"
      },
      "source": [
        " data.shape"
      ],
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2183, 1)"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "MhuAmHxZehNw",
        "outputId": "8d173b81-3f05-4f40-9c9a-34e16472a073"
      },
      "source": [
        " data.describe()"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>load</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>2183.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>6393.616060</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>17143.020064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>3377.919600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5257.520640</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5935.910400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>6738.692400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>805444.430400</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                load\n",
              "count    2183.000000\n",
              "mean     6393.616060\n",
              "std     17143.020064\n",
              "min      3377.919600\n",
              "25%      5257.520640\n",
              "50%      5935.910400\n",
              "75%      6738.692400\n",
              "max    805444.430400"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aMY5GScuemmV",
        "outputId": "f5292128-f59c-4b09-f2a9-df379a3551d6"
      },
      "source": [
        " data.info()"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 2183 entries, 0 to 2182\n",
            "Data columns (total 1 columns):\n",
            " #   Column  Non-Null Count  Dtype  \n",
            "---  ------  --------------  -----  \n",
            " 0   load    2183 non-null   float64\n",
            "dtypes: float64(1)\n",
            "memory usage: 17.2 KB\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "6te37HNMet6W",
        "outputId": "e5790940-d5e3-4f48-90c3-f7a2f04bc6c0"
      },
      "source": [
        " data.corr()"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>load</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>load</th>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      load\n",
              "load   1.0"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MTOrR59jex6g",
        "outputId": "85f96784-bbf4-4ab5-e1fa-ef0157fafa22"
      },
      "source": [
        " data.isnull().sum()"
      ],
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "load    0\n",
              "dtype: int64"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 15
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 254
        },
        "id": "FgC_nrnme2Dd",
        "outputId": "4c9003d6-b6bf-410f-bdfa-e0aab5cdc92e"
      },
      "source": [
        " sns.boxplot(x=data['load'])"
      ],
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f01b7a5f2d0>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "HFsH0-_ce5qG",
        "outputId": "0a21fd09-3df6-4885-81ee-5f58b4526b0f"
      },
      "source": [
        " from scipy import stats\n",
        " \n",
        "z = np.abs(stats.zscore(load_data.iloc[:,0]))\n",
        " \n",
        "threshold = 3\n",
        "print(np.where(z > 3))"
      ],
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(array([928]),)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VgLmFq28e9hP"
      },
      "source": [
        " data.iloc[928,0] = data.iloc[927,0]"
      ],
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 252
        },
        "id": "2QqDl3QyfA-V",
        "outputId": "e8e7b4bf-cf58-44a2-d569-6620aff4dea7"
      },
      "source": [
        " sns.boxplot(x=data['load'])"
      ],
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.axes._subplots.AxesSubplot at 0x7f01b78ce890>"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "rUWF9IJVfHBH"
      },
      "source": [
        " data_x = []\n",
        "data_y = []\n",
        "for i in range(0,len(data)-(24*7)):\n",
        "  data_x.append(data.iloc[i,0])\n",
        "  data_y.append(data.iloc[i+(24*7),0])"
      ],
      "execution_count": 20,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 205
        },
        "id": "5C1ZteFNfLKA",
        "outputId": "4b8cc94d-f237-495e-d5f8-38cec2d3df90"
      },
      "source": [
        " \n",
        "plt.scatter(data_x,data_y)\n",
        "plt.title(\"load data visualisation\")\n",
        "plt.xlabel(\"previous hours load\")\n",
        "plt.ylabel(\"present hours load\")\n",
        "plt.grid()"
      ],
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ETQvoeS_fRzi",
        "outputId": "9ae7b907-d90c-4067-880a-f8f6ba82cab4"
      },
      "source": [
        " data_xx = pd.DataFrame(data_x)\n",
        "min_x = float(data_xx.min())\n",
        "max_x = float(data_xx.max())\n",
        "data_yy = pd.DataFrame(data_y)\n",
        "min_y = float(data_yy.min())\n",
        "max_y = float(data_yy.max())\n",
        "print(min_x)\n",
        "print(min_y)\n",
        "print(max_x)\n",
        "print(max_y)"
      ],
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "3381.1930800000005\n",
            "3377.9196\n",
            "8841.66948\n",
            "8841.66948\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7gWc37N1fbbK"
      },
      "source": [
        " x = minmax_scale(data_x)\n",
        "y = minmax_scale(data_y)"
      ],
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 419
        },
        "id": "o514FaeAfc-b",
        "outputId": "6a01bcba-0e49-45d1-b3bb-39697622a9e8"
      },
      "source": [
        " data_norm = []\n",
        "for i in range(len(data)-24*7):\n",
        "  data_norm.append([x[i],y[i]])\n",
        " \n",
        "data_norm = pd.DataFrame(data_norm)\n",
        "data_norm"
      ],
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.293377</td>\n",
              "      <td>0.322302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.276021</td>\n",
              "      <td>0.286040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.309820</td>\n",
              "      <td>0.254087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.332401</td>\n",
              "      <td>0.300562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.413902</td>\n",
              "      <td>0.404639</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2010</th>\n",
              "      <td>0.499943</td>\n",
              "      <td>0.228524</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2011</th>\n",
              "      <td>0.536940</td>\n",
              "      <td>0.217797</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2012</th>\n",
              "      <td>0.622923</td>\n",
              "      <td>0.246298</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2013</th>\n",
              "      <td>0.489837</td>\n",
              "      <td>0.324384</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2014</th>\n",
              "      <td>0.096917</td>\n",
              "      <td>0.651650</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2015 rows × 2 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "             0         1\n",
              "0     0.293377  0.322302\n",
              "1     0.276021  0.286040\n",
              "2     0.309820  0.254087\n",
              "3     0.332401  0.300562\n",
              "4     0.413902  0.404639\n",
              "...        ...       ...\n",
              "2010  0.499943  0.228524\n",
              "2011  0.536940  0.217797\n",
              "2012  0.622923  0.246298\n",
              "2013  0.489837  0.324384\n",
              "2014  0.096917  0.651650\n",
              "\n",
              "[2015 rows x 2 columns]"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Qd0Y8vYRfhZg"
      },
      "source": [
        " from sklearn.model_selection import train_test_split\n",
        "data_train,data_test = train_test_split(data_norm,test_size=0.1)"
      ],
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 204
        },
        "id": "hz2Pp_z3fr5D",
        "outputId": "5af2689b-2063-412f-db43-5bb710aebc1d"
      },
      "source": [
        " data_norm.head()"
      ],
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.293377</td>\n",
              "      <td>0.322302</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.276021</td>\n",
              "      <td>0.286040</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.309820</td>\n",
              "      <td>0.254087</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.332401</td>\n",
              "      <td>0.300562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.413902</td>\n",
              "      <td>0.404639</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "          0         1\n",
              "0  0.293377  0.322302\n",
              "1  0.276021  0.286040\n",
              "2  0.309820  0.254087\n",
              "3  0.332401  0.300562\n",
              "4  0.413902  0.404639"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "gVHdWGXSfv1f"
      },
      "source": [
        " data_x = np.array(data_train[0])"
      ],
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "W-0lRfdAfzij"
      },
      "source": [
        " data_y = np.array(data_train[1])"
      ],
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "fOTcOGUJf26k",
        "outputId": "e923ebb7-0522-4985-c5bc-ec323ce909f3"
      },
      "source": [
        " len(data_x)"
      ],
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1813"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wnkxUqgsf7Nz",
        "outputId": "9e6604ba-8c49-4c30-86bf-2dd86f33a2ec"
      },
      "source": [
        " len(data_test)"
      ],
      "execution_count": 30,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "202"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Wzp-ZD94f-zA"
      },
      "source": [
        " max_iters=2000\n",
        "m=1.0\n",
        "c=-1.0\n",
        "Gm=0.0\n",
        "Gc=0.0\n",
        "alpha=0.1\n",
        "exp=10**(-8)\n",
        "dm=0.0\n",
        "dc=0.0\n",
        "iter=1\n",
        "error=[]"
      ],
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "kgwwLuR9gDYL"
      },
      "source": [
        " while (iter<=max_iters):\n",
        "  err=0.0\n",
        "  for i in range(len(data_x)):\n",
        "    gm=-1*(data_y[i]-(m*data_x[i])-c)*data_x[i]\n",
        "    gc=-1*(data_y[i]-(m*data_x[i])-c)\n",
        "    err+=(data_y[i]-m*data_x[i]-c)**2\n",
        "    Gm = Gm + (gm**2)\n",
        "    Gc = Gc + (gc**2) \n",
        "    r1 = math.sqrt(Gm + exp)\n",
        "    r2 = math.sqrt(Gc + exp)\n",
        "    dm = -1*(alpha/r1)*gm\n",
        "    dc = -1*(alpha/r2)*gc\n",
        "    m = m + dm\n",
        "    c = c + dc\n",
        "  error.append(err/(2*len(data_x)))\n",
        "  iter=iter+1"
      ],
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YVTs7C6fgIjP",
        "outputId": "f74d7812-386b-4b96-abe5-bfc9bd260758"
      },
      "source": [
        " len(error)"
      ],
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "2000"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "CPiHv3XmgNLZ"
      },
      "source": [
        " iters = np.arange(max_iters)"
      ],
      "execution_count": 34,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "HpZ7XjAYgR95"
      },
      "source": [
        " from sklearn.metrics import mean_squared_error"
      ],
      "execution_count": 35,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1YJW6sXKgWcN"
      },
      "source": [
        " pred = []\n",
        "for i in range(len(data_train)):\n",
        "  pred.append(m*data_x[i] + c)"
      ],
      "execution_count": 36,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "4U64QORYgbbT"
      },
      "source": [
        " mse_train = mean_squared_error(data_y,pred)"
      ],
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "G81LytfNgfnV"
      },
      "source": [
        " data_test"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "ZxZbQ3JkgmK2"
      },
      "source": [
        " pred_test = m*data_test[0] + c\n",
        "mse_test = mean_squared_error(data_test[1],pred_test)"
      ],
      "execution_count": 39,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9P9qBdiOgnk1",
        "outputId": "284a9ddf-4608-4499-8e32-f412dadd6693"
      },
      "source": [
        " print(\"training data mean squared error:\",mse_train)\n",
        "print(\"Testing data mean squared error:\",mse_test)"
      ],
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "training data mean squared error: 0.029977439012668795\n",
            "Testing data mean squared error: 0.03033785115140737\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Lk5OxRNrgthQ",
        "outputId": "a015437a-0c22-4197-b0f7-8375be44bdaa"
      },
      "source": [
        " print(\"model parameter:\",m,c)"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "model parameter: 0.5066104328057787 0.23019183773579877\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "id": "bTLvDIrdg3b7",
        "outputId": "000d5612-4db3-4630-e26c-875fb1d07797"
      },
      "source": [
        " plt.scatter(data_train[0],data_train[1],label=\"original data points\")\n",
        "plt.plot(data_train[0],pred,color='red',label=\"predicted line\")\n",
        "plt.title(\"visualing regression line of training data\")\n",
        "plt.xlabel(\"previous hours load\")\n",
        "plt.ylabel(\"present hours load\")\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 212
        },
        "id": "0_27xIWhg8kI",
        "outputId": "f8998fd2-1dac-4816-f9ad-34555d9adbeb"
      },
      "source": [
        " plt.scatter(data_test[0],data_test[1],label=\"original data points\")\n",
        "plt.plot(data_test[0],pred_test,color='red',label=\"predicted line\")\n",
        "plt.title(\"visualing regression line of testing data\")\n",
        "plt.xlabel(\"previous hours load\")\n",
        "plt.ylabel(\"present hours load\")\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()"
      ],
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "urxnlFI8hB3d",
        "outputId": "14c19dee-811b-4798-fff1-ca2630ea9346"
      },
      "source": [
        " input_load = float(input(\"enter load at this time : \"))\n",
        "input_load = (input_load - min_x)/(max_x-min_x)\n",
        "output_load = input_load*m+c\n",
        " \n",
        "output_load = output_load*(max_y-min_y)+min_y\n",
        " \n",
        "print(\"predicted load for this hour at next week is : \",output_load)"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "enter load at this time : 498\n",
            "predicted load for this hour at next week is :  3174.098888819078\n"
          ],
          "name": "stdout"
        }
      ]
    }
  ]
}